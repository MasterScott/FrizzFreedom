/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package qarabiy;

import tasks.RefreshFileListTask;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import tasks.RarJpegCheckTask;

/**
 *
 * @author pantene
 */
public class MainWnd extends javax.swing.JFrame {

    final Lock refreshLock = new ReentrantLock();
    final Condition guiRefresh = refreshLock.newCondition();
    /**
     * Creates new form MainWnd
     */
    public MainWnd() {
        try {
            initComponents();
            setAlwaysOnTop(false);
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            jDownloadsList.setModel(new DefaultComboBoxModel());
            jCategoriesList.setModel(new DefaultComboBoxModel());
            jCategoriesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            
            jInfoTable.getColumnModel().getColumn(0).setMaxWidth(50);
            jInfoTable.getColumnModel().getColumn(1).setMaxWidth(60);
            jInfoTable.getColumnModel().getColumn(2).setMaxWidth(60);
            jInfoTable.getColumnModel().getColumn(3).setMaxWidth(70);
            jInfoTable.getColumnModel().getColumn(4).setMaxWidth(80);
            jInfoTable.getColumnModel().getColumn(5).setMaxWidth(50);
            jInfoTable.getColumnModel().getColumn(6).setMaxWidth(50);
            jInfoTable.getColumnModel().getColumn(7).setMaxWidth(90);
            jInfoTable.getColumnModel().getColumn(8).setMaxWidth(90);
            jInfoTable.getColumnModel().getColumn(9).setMaxWidth(90);
            jSpinner1.setValue(Grabber.refreshUrlsListInterval);
            
            DefaultComboBoxModel catModel =  (DefaultComboBoxModel) jCategoriesList.getModel();
            ArrayList<Integer> catEnableIndices = new ArrayList<Integer>();
            int i=0;
            for (Category cat : Categorizer.getCategoriesEnableList()){
                Object newItem = cat.name;
                catModel.addElement(newItem);
                if (cat.isEnabled)
                    catEnableIndices.add(i);
                i++;
//              jCategoriesList.setSelectedIndices(catModel.getSize()-1);
//            catModel.setSelectedItem(catModel.getElementAt(catModel.getSize()-1));
            }
            int[] selectedIndices = new int[catEnableIndices.size()];
            for (int j=0; j<catEnableIndices.size(); j++)
                selectedIndices[j] = catEnableIndices.get(j).intValue();
            
            jCategoriesList.setSelectedIndices(selectedIndices);
            
            new Timer(Grabber.refreshGUIWaitingMs, refreshGUIthread).start();
            
            jCategoriesList.addListSelectionListener(new ListSelectionListener() {
                
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (!e.getValueIsAdjusting()){
                        DefaultComboBoxModel catModel =  (DefaultComboBoxModel) jCategoriesList.getModel();
                        for (int i=0; i<catModel.getSize(); i++)
                            Categorizer.changeCategoryState(
                                    catModel.getElementAt(i).toString(),
                                    jCategoriesList.isSelectedIndex(i)
                            );
                    }
                }
            });
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWnd.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainWnd.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainWnd.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainWnd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jProgressBar1 = new javax.swing.JProgressBar();
        jRunButton1 = new javax.swing.JButton();
        jRefreshCheckBox = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jDownloadsList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jInfoTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jCategoriesList = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jRarJpegDtect = new javax.swing.JButton();
        jResetURLs1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FrizzFreedom");

        jTextPane1.setEditable(false);
        jTextPane1.setText("*.exe");
        jTextPane1.setToolTipText("");
        jTextPane1.setEnabled(false);
        jScrollPane1.setViewportView(jTextPane1);

        jProgressBar1.setToolTipText("");

        jRunButton1.setText("Запустить скачивание");
        jRunButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRunButton1ActionPerformed(evt);
            }
        });

        jRefreshCheckBox.setSelected(true);
        jRefreshCheckBox.setText("Догружать новые ссылки раз в (сек)");
        jRefreshCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRefreshCheckBoxStateChanged(evt);
            }
        });
        jRefreshCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRefreshCheckBoxItemStateChanged(evt);
            }
        });
        jRefreshCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefreshCheckBoxActionPerformed(evt);
            }
        });

        jSpinner1.setMinimumSize(new java.awt.Dimension(1, 1));
        jSpinner1.setName(""); // NOI18N
        jSpinner1.setValue(1);
        jSpinner1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jSpinner1InputMethodTextChanged(evt);
            }
        });

        jLabel2.setText("Количество потоков");

        jSpinner2.setEnabled(false);
        jSpinner2.setMinimumSize(new java.awt.Dimension(1, 1));
        jSpinner2.setName(""); // NOI18N
        jSpinner2.setValue(10);
        jSpinner2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jSpinner2InputMethodTextChanged(evt);
            }
        });

        jLabel3.setText("Последние загруженные файлы:");

        jTextPane3.setText("*.txt\n*.mp3\n*.jpg\n*.*");
        jTextPane3.setEnabled(false);
        jScrollPane3.setViewportView(jTextPane3);

        jLabel4.setText("Белый список:");

        jLabel5.setText("Черный список:");

        jButton1.setText("Применить");
        jButton1.setEnabled(false);

        jButton2.setText("?");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(jDownloadsList);

        jInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ссылок", "Спарсено", "Скачано", "В процессе", "Редиректов", "503", "403", "Других ошибок", "Скачано ранее", "Пропущено"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jInfoTable);
        if (jInfoTable.getColumnModel().getColumnCount() > 0) {
            jInfoTable.getColumnModel().getColumn(5).setMaxWidth(50);
            jInfoTable.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        jScrollPane5.setViewportView(jCategoriesList);

        jLabel6.setText("Включенные категории:");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Качать только новые файлы");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jRarJpegDtect.setText("ACHTUNG DETECT");
        jRarJpegDtect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRarJpegDtectActionPerformed(evt);
            }
        });

        jResetURLs1.setText("Сбосить историю");
        jResetURLs1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetURLs1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jResetURLs1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRarJpegDtect))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jResetURLs1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRarJpegDtect, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(279, 279, 279)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRunButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jRefreshCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1)))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRunButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRefreshCheckBox)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel3.getAccessibleContext().setAccessibleName("Последние загрузки");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public ActionListener refreshGUIthread = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (!Grabber.filesCompleted.isEmpty())
                            ((DefaultComboBoxModel) jDownloadsList.getModel()).addElement(Grabber.filesCompleted.remove());
                        jInfoTable.getModel().setValueAt(Grabber.pagesParsed, 0, 0);
                        jInfoTable.getModel().setValueAt(Grabber.parsedLinks, 0, 1);
                        jInfoTable.getModel().setValueAt(Grabber.completedDownloads, 0, 2);
                        jInfoTable.getModel().setValueAt(Grabber.urlsInProcess, 0, 3);
                        jInfoTable.getModel().setValueAt(Grabber.catchedRedirects, 0, 4);
                        jInfoTable.getModel().setValueAt(Grabber.catched503, 0, 5);
                        jInfoTable.getModel().setValueAt(Grabber.catched403, 0, 6);
                        jInfoTable.getModel().setValueAt(Grabber.catchedOtherErrors, 0, 7);
                        jInfoTable.getModel().setValueAt(Grabber.alreadyDownloaded, 0, 8);
                        jInfoTable.getModel().setValueAt(Grabber.skippedByCategory, 0, 9);
                        
                        float progress = Grabber.urlsToAnalyze.isEmpty() ? 0 : 100*Grabber.urlsCompleted.size()/Grabber.urlsToAnalyze.size();
                        jProgressBar1.setValue(Math.round(progress));
                        
                    } catch (Exception ex) {
                        Logger.getLogger(MainWnd.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                    }
                }
    };
    
    private void jRunButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRunButton1ActionPerformed
        
//        Grabber.refreshEnabled = true;
        
        if (Grabber.downloadEnabled){
            Grabber.downloadService.shutdown();
            jRunButton1.setText("Запустить скачивание");
        } else {
//            Grabber.downloadService.getQueue().
            for (int i=0; i<Grabber.downloadThreadCount; i++){
                Grabber.downloadService.scheduleAtFixedRate(new tasks.DownloadTask(), 0, 1, TimeUnit.MILLISECONDS);
            }
            jRunButton1.setText("Остановить скачивание");
        }
        
        Grabber.downloadEnabled = !Grabber.downloadEnabled;
    }//GEN-LAST:event_jRunButton1ActionPerformed

    private void jRefreshCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRefreshCheckBoxStateChanged

    }//GEN-LAST:event_jRefreshCheckBoxStateChanged

    private void jSpinner1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinner1InputMethodTextChanged
        Grabber.refreshURLsWaiting = Integer.getInteger(jSpinner1.getValue().toString());
        Grabber.refreshListThread.shutdown();
        Grabber.refreshListThread.scheduleWithFixedDelay(new RefreshFileListTask(), 0, Grabber.refreshURLsWaiting, TimeUnit.SECONDS);
        System.out.println("resresh interval changed");

    }//GEN-LAST:event_jSpinner1InputMethodTextChanged

    private void jRefreshCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRefreshCheckBoxItemStateChanged
        if (jRefreshCheckBox.isSelected()){
            Grabber.refreshListThread.scheduleWithFixedDelay(new RefreshFileListTask(), 0, Grabber.refreshURLsWaiting, TimeUnit.SECONDS);
            System.out.println("start refresh thread");
        } else {
            Grabber.refreshListThread.shutdown();
            System.out.println("stop refresh thread");
        }  
    }//GEN-LAST:event_jRefreshCheckBoxItemStateChanged

    private void jSpinner2InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinner2InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinner2InputMethodTextChanged

    private void jRefreshCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefreshCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRefreshCheckBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JOptionPane.showMessageDialog(null,"FrizzFreedom by pantene\nRGhost grabber tool\n\nv0.0.8-add, UNEG, 2016\n\nP.S. cion - ебасос.","Эбаут",JOptionPane.INFORMATION_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        Grabber.oldDownloadEnabled = !jCheckBox1.isSelected();
        RGLogger.out("changed state of old urls mode download: "+Grabber.oldDownloadEnabled);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jRarJpegDtectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRarJpegDtectActionPerformed
        rarJpegFolderDetect("Растровые изображения");                                            
        rarJpegFolderDetect("unknown");                                            
        rarJpegFolderDetect("no extension");
    }//GEN-LAST:event_jRarJpegDtectActionPerformed

    private void jResetURLs1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetURLs1ActionPerformed
        Grabber.urlsParsed.clear();
        RGLogger.out("clear download history (skipped files)");
    }//GEN-LAST:event_jResetURLs1ActionPerformed

    public static void rarJpegFolderDetect(String folderStr){
        File folder = new File("download"+File.separator+folderStr);
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
//                System.out.println("File " + listOfFiles[i].getName());
                Grabber.postProcessService.submit(
                        new RarJpegCheckTask(
                                "download"+File.separator+folderStr+File.separator+listOfFiles[i].getName()));
            } else if (listOfFiles[i].isDirectory()) {
//                System.out.println("Directory " + listOfFiles[i].getName());
            }
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWnd().setVisible(true);
            }
        });
    }

    public boolean isRefreshOn() {
        return jRefreshCheckBox.isSelected();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jCategoriesList;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JList jDownloadsList;
    private javax.swing.JTable jInfoTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton jRarJpegDtect;
    private javax.swing.JCheckBox jRefreshCheckBox;
    private javax.swing.JButton jResetURLs1;
    private javax.swing.JButton jRunButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
}
